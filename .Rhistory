(rm(list = ls(all = TRUE))
)
(rm(list = ls(all = TRUE));)
(rm(list = ls(all = TRUE))
)
unlink(".RData")
library(compositions)
library(zCompositions)
library(vioplot)
library(vegan)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ALDEx2")
library(igraph)
library(seqtime)
library(SpiecEasi)
library(phyloseq)
set.seed(10010)
graph <- make_graph('cluster', d, e)
Prec  <- graph2prec(graph)
Cor   <- cov2cor(prec2cov(Prec))
X <- synth_comm_from_counts(amgut1.filt.cs, mar=2, distr='zinegbin', Sigma=Cor, n=n)
set.seed(10010)
graph <- make_graph('cluster', d, e)
data(amgut1.filt)
depths <- rowSums(amgut1.filt)
amgut1.filt.n  <- t(apply(amgut1.filt, 1, norm_to_total))
amgut1.filt.cs <- round(amgut1.filt.n * min(depths))
d <- ncol(amgut1.filt.cs)
n <- nrow(amgut1.filt.cs)
e <- d
set.seed(10010)
graph <- make_graph('cluster', d, e)
Prec  <- graph2prec(graph)
Cor   <- cov2cor(prec2cov(Prec))
X <- synth_comm_from_counts(amgut1.filt.cs, mar=2, distr='zinegbin', Sigma=Cor, n=n)
View(X)
se <- spiec.easi(X, method='mb', lambda.min.ratio=1e-2, nlambda=15)
se.mb.amgut2 <- spiec.easi(ps, method='mb', lambda.min.ratio=1e-2,
nlambda=20, pulsar.params=list(rep.num=50))
d.heatmap<-read.table("___path_abun_unstrat_descrip_higher3_edit.txt", sep="\t", quote="", check.names=F, header=T, row.names=1, comment.char="")
huge::huge.roc(se$est$path, graph, verbose=FALSE)
stars.pr(getOptMerge(se), graph, verbose=FALSE)
se.mb.amgut <- spiec.easi(amgut1.filt, method='mb', lambda.min.ratio=1e-2,
nlambda=20, pulsar.params=list(rep.num=50))
se.gl.amgut <- spiec.easi(amgut1.filt, method='glasso', lambda.min.ratio=1e-2,
nlambda=20, pulsar.params=list(rep.num=50))
sparcc.amgut <- sparcc(amgut1.filt)
## Define arbitrary threshold for SparCC correlation matrix for the graph
sparcc.graph <- abs(sparcc.amgut$Cor) >= 0.3
diag(sparcc.graph) <- 0
sparcc.graph <- Matrix(sparcc.graph, sparse=TRUE)
## Create igraph objects
ig.mb     <- adj2igraph(getRefit(se.mb.amgut))
ig.gl     <- adj2igraph(getRefit(se.gl.amgut))
ig.sparcc <- adj2igraph(sparcc.graph)
sparcc.graph <- matrix(sparcc.graph, sparse=TRUE)
sparcc.graph <- Matrix(sparcc.graph, sparse=TRUE)
sparcc.graph <- as.matrix(sparcc.graph, sparse=TRUE)
View(ig.sparcc)
install.packages("Matrix")
install.packages("Matrix")
library(dada3)
library(dada2)
install.packages("vroom")
install.packages("eulerr")
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("DECIPHER")
#Classify reads
seqs_wERR <- NULL
seqs_wERR <- readDNAStringSet("uniques_1224seqs___0cut.fa")
ids <- NULL
ids <- IdTaxa(seqs_wERR,
BEExact_trainingset,
type="condensed",
strand="top", # or "top" if same as trainingSet
threshold=20, # 60 (very high) or 50 (high)
bootstraps=100,
processors=NULL) # use all available processors
#Load the classifier
BEExact_trainingset <- get (load("C:/Users/Brendan Daisley/Documents/LAWSON_3.0/00-Projects-00/ARTICLE)DD/Submit files/trainsets/BxV4TS_863_trainset_v4.RData"))
#Classify reads
seqs_wERR <- NULL
seqs_wERR <- readDNAStringSet("uniques_1224seqs___0cut.fa")
ids <- NULL
ids <- IdTaxa(seqs_wERR,
BEExact_trainingset,
type="condensed",
strand="top", # or "top" if same as trainingSet
threshold=20, # 60 (very high) or 50 (high)
bootstraps=100,
processors=NULL) # use all available processors
library(DECIPHER)
install.packages("caret")
library(tidyverse)
library(caret)
set.seed(23)
training.samples <- dna %>%
createDataPartition(p = 0.9, list = FALSE)
dna <- readDNAStringSet("C:/Users/Brendan Daisley/Desktop/Desktop___ARTICLE_BEExact_NEW/3_Validation_benchmarking_classifiers/sequences_error_1percent_14e___NoNs.fasta")
set.seed(23)
training.samples <- dna %>%
createDataPartition(p = 0.9, list = FALSE)
dna <- readDNAStringSet("C:/Users/Brendan Daisley/Desktop/Desktop___ARTICLE_BEExact_NEW/3_Validation_benchmarking_classifiers/sequences_error_1percent_14e___NoNs.fasta")
library(tidyverse)
library(seqinr)
dna <- readDNAStringSet("C:/Users/Brendan Daisley/Desktop/Desktop___ARTICLE_BEExact_NEW/3_Validation_benchmarking_classifiers/sequences_error_1percent_14e___NoNs.fasta")
library(ape)
library(DECIPHER)
detach("package:DECIPHER", unload=TRUE)
dna <- readDNAStringSet("C:/Users/Brendan Daisley/Desktop/Desktop___ARTICLE_BEExact_NEW/3_Validation_benchmarking_classifiers/sequences_error_1percent_14e___NoNs.fasta")
detach("package:caret", unload=TRUE)
library("caret", lib.loc="~/R/win-library/3.6")
detach("package:ape", unload=TRUE)
library(tidyverse)
library(caret)
library(ape)
dna <- readDNAStringSet("C:/Users/Brendan Daisley/Desktop/Desktop___ARTICLE_BEExact_NEW/3_Validation_benchmarking_classifiers/sequences_error_1percent_14e___NoNs.fasta")
dna <- readXStringSet("C:/Users/Brendan Daisley/Desktop/Desktop___ARTICLE_BEExact_NEW/3_Validation_benchmarking_classifiers/sequences_error_1percent_14e___NoNs.fasta")
library(dada2)
dna <- readDNAStringSet("C:/Users/Brendan Daisley/Desktop/Desktop___ARTICLE_BEExact_NEW/3_Validation_benchmarking_classifiers/sequences_error_1percent_14e___NoNs.fasta")
library(Biostrings)
dna <- readDNAStringSet("C:/Users/Brendan Daisley/Desktop/Desktop___ARTICLE_BEExact_NEW/3_Validation_benchmarking_classifiers/sequences_error_1percent_14e___NoNs.fasta")
options(repos = c(
fawda123 = 'https://fawda123.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
# Install ggord
install.packages('ggord')
install.packages("ggord", repos="http://cran.rstudio.com/", dependencies=TRUE)
install.packages("~/R/ggord-master.zip", repos = NULL, type = "win.binary")
# plot the RDA using ggplot (ggord package)
library(ggord)
# plot the RDA using ggplot (ggord package)
library(ggord-master)
install.packages("~/R/ggord.zip", repos = NULL, type = "win.binary")
# plot the RDA using ggplot (ggord package)
library(ggord)
# Install ggord
install.packages('ggord')
library(ggplot2)
library(phyloseq)
library(BiocManager)
library(decontam)
library(zCompositions)
library(compositions)
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
write.table(contamdf.prev05, file="contamdf.prev05.txt", sep="\t",  quote=F) #Kingdom to Species
install.packages("devtools") #Installs devtools (if not already installed)
devtools::install_github("donaldtmcknight/microDecon") #Installs microDecon
install.packages("devtools")
devtools::install_github("donaldtmcknight/microDecon") #Installs microDecon
library(compositions)
library(zCompositions)
library(ggplot2)
#library(CoDaSeq)
#library(export)
library(eoffice)
library(ALDEx2)
library(vegan)
library(compositions)
library(zCompositions)
library(ggord)
library(ggplot2)
library(eoffice)
#Step 1: Load dev packages
library(devtools)
library(roxygen2)
#Step 2: Set working dir for isolateR files
setwd("~/Bioinformatics/R_libraries/isolateR")
#Step 3: Make new/update documentation
devtools::document()
#Step 5: Detach and reload dev packages
detach("package:devtools", unload=TRUE)
detach("package:roxygen2", unload=TRUE)
library(devtools)
library(roxygen2)
#Step 6: Set working directory 1 level up from isolateR dir
setwd("~/Bioinformatics/R_libraries")
#Step 7: Test install
install("isolateR", force = TRUE, dependencies = TRUE)
#Step 1: Load dev packages
library(devtools)
library(roxygen2)
#Step 2: Set working dir for isolateR files
setwd("~/Bioinformatics/R_libraries/isolateR")
#Step 3: Make new/update documentation
devtools::document()
